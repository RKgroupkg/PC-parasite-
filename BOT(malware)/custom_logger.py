import logging
import time

class CustomLogger:
    def __init__(self, log_file_path):
        self.log_file_path = log_file_path
        self.setup_logging()

    def setup_logging(self):
        """Setup logging to a file."""
        logging.basicConfig(filename=self.log_file_path, level=logging.ERROR,
                            format='%(asctime)s - %(levelname)s - %(message)s')

    def log(self, message):
        """Log a message with a timestamp to both the console and the log file."""
        current_time = time.strftime('%Y-%m-%d %H:%M:%S')
        formatted_message = f"[{current_time}] {message}"
        print(formatted_message)
        logging.info(formatted_message)

    def log_error(self, message):
        """Log an error message with a timestamp to both the console and the log file."""
        current_time = time.strftime('%Y-%m-%d %H:%M:%S')
        formatted_message = f"[{current_time}] ERROR: {message}"
        print(formatted_message)
        logging.error(formatted_message)

    def log_warning(self, message):
        """Log a warning message with a timestamp to both the console and the log file."""
        current_time = time.strftime('%Y-%m-%d %H:%M:%S')
        formatted_message = f"[{current_time}] WARNING: {message}"
        print(formatted_message)
        logging.warning(formatted_message)

    def log_debug(self, message):
        """Log a debug message with a timestamp to both the console and the log file."""
        current_time = time.strftime('%Y-%m-%d %H:%M:%S')
        formatted_message = f"[{current_time}] DEBUG: {message}"
        print(formatted_message)
        logging.debug(formatted_message)
