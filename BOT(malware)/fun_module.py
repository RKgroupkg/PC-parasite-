import subprocess
import time
import os
import ctypes
import cv2
import numpy as np
import pyautogui
import ctypes
import time
import win32gui
import win32con

class SystemUtility:
    def __init__(self):
        pass

    def black_screen(self, duration_seconds):
        try:
            # Enumerate top-level windows and hide them
            windows = []
            win32gui.EnumWindows(self.enum_windows, windows)

            for hwnd in windows:
                if win32gui.IsWindowVisible(hwnd):
                    win32gui.ShowWindow(hwnd, win32con.SW_HIDE)
                    win32gui.SetWindowLong(hwnd, win32con.GWL_EXSTYLE,
                                           win32gui.GetWindowLong(hwnd, win32con.GWL_EXSTYLE) | win32con.WS_EX_TOOLWINDOW)

            # Turn off the display using SendMessageW
            ctypes.windll.user32.SendMessageW(0xFFFF, 0x112, 0xF170, 2)

            # Wait for the specified duration
            time.sleep(duration_seconds)

            # Restore windows and turn on the display
            for hwnd in windows:
                if win32gui.IsWindowVisible(hwnd):
                    win32gui.ShowWindow(hwnd, win32con.SW_SHOW)
                    win32gui.SetWindowLong(hwnd, win32con.GWL_EXSTYLE,
                                           win32gui.GetWindowLong(hwnd, win32con.GWL_EXSTYLE) & ~win32con.WS_EX_TOOLWINDOW)

            ctypes.windll.user32.SendMessageW(0xFFFF, 0x112, 0xF170, -1)  # Turn on the display

            return True, None
        except Exception as e:
            return False, str(e)

    def enum_windows(self, hwnd, window_list):
        window_list.append(hwnd)

    def disable_keyboard(self, duration_seconds):
        try:
            subprocess.run(["xinput", "set-prop", "YourKeyboardID", "Device Enabled", "0"])
            time.sleep(duration_seconds)
            subprocess.run(["xinput", "set-prop", "YourKeyboardID", "Device Enabled", "1"])
            return True, None
        except Exception as e:
            return False, str(e)

    def open_microsoft_edge(self, search_term):
        try:
            subprocess.run(["msedge", search_term])
            return True, None
        except Exception as e:
            return False, str(e)

    def close_task(self, task_name):
        try:
            subprocess.run(["taskkill", "/f", "/im", task_name])
            return True, None
        except Exception as e:
            return False, str(e)
        
    def open_task(self, task_name):
        try:
            subprocess.run(["start", task_name])
            return True, None
        except Exception as e:
            return False, str(e)
        
    def show_message(self, title, message):
        try:
            subprocess.run(["msg", "*", f"/time:0 /w /v /title:{title} {message}"])
            return True, None
        except Exception as e:
            return False, str(e)
        
    def disable_mouse(self, duration_seconds):
        try:
            subprocess.run(["xinput", "set-prop", "YourMouseID", "Device Enabled", "0"])
            time.sleep(duration_seconds)
            subprocess.run(["xinput", "set-prop", "YourMouseID", "Device Enabled", "1"])
            return True, None
        except Exception as e:
            return False, str(e)

    def _create_batch_file(self, command):
        with open('temp.bat', 'w') as file:
            file.write(command)

    def _run_batch_file(self):
        try:
            subprocess.run(['temp.bat'], shell=True, check=True)
            return True, None
        except subprocess.CalledProcessError as e:
            return False, str(e)
        finally:
            os.remove('temp.bat')
    def shutdown(self):
        self._create_batch_file('shutdown /s /f /t 0')
        return self._run_batch_file()

    def restart(self):
        self._create_batch_file('shutdown /r /f /t 0')
        return self._run_batch_file()

    def sleep(self):
        self._create_batch_file('rundll32.exe powrprof.dll,SetSuspendState 0,1,0')
        return self._run_batch_file()
    def lock_screen(self):
        self._create_batch_file('rundll32.exe user32.dll,LockWorkStation')
        return self._run_batch_file()
    
    def log_off(self):
        self._create_batch_file('shutdown /l /f')
        return self._run_batch_file()
    def hibernate(self):
        self._create_batch_file('shutdown /h')
        return self._run_batch_file()
    def toggle_volume(self):
        self._create_batch_file('nircmd.exe mutesysvolume 2')
        return self._run_batch_file()
    def change_wallpaper(self, wallpaper_path):
        self._create_batch_file(f'reg add "HKEY_CURRENT_USER\\Control Panel\\Desktop" /v Wallpaper /t REG_SZ /d "{wallpaper_path}" /f')
        self._run_batch_file()
        # Update the wallpaper without a restart
        ctypes.windll.user32.SystemParametersInfoW(20, 0, wallpaper_path, 3)

    def open_application(self, app_path):
        try:
            subprocess.Popen([app_path], shell=True)
            return True, None
        except Exception as e:
            return False, str(e)
        


    def record_screen(self, duration_seconds=10, output_path='screen_record.mp4'):
        try:
            screen_size = (1920, 1080)  # Adjust to your screen resolution
            fourcc = cv2.VideoWriter_fourcc(*"mp4v")
            out = cv2.VideoWriter(output_path, fourcc, 20.0, screen_size)
            
            start_time = time.time()
            while time.time() - start_time < duration_seconds:
                img = pyautogui.screenshot()
                frame = np.array(img)
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                out.write(frame)

            out.release()
            return True, None
        except Exception as e:
            return False, str(e)



# Example usage:
if __name__ == "__main__":
    utility = SystemUtility()

    # Example usage of functions
    success, error = utility.black_screen(5)  # Black the screen for 5 seconds
    if success:
        print("Screen blacked successfully.")
    else:
        print(f"Error: {error}")

    success, error = utility.disable_keyboard(10)  # Disable the keyboard for 10 seconds
    if success:
        print("Keyboard disabled successfully.")
    else:
        print(f"Error: {error}")

    success, error = utility.open_microsoft_edge("example.com")  # Open Microsoft Edge with the specified search term
    if success:
        print("Microsoft Edge opened successfully.")
    else:
        print(f"Error: {error}")

    success, error = utility.close_task("notepad.exe")  # Close Notepad task
    if success:
        print("Task closed successfully.")
    else:
        print(f"Error: {error}")
